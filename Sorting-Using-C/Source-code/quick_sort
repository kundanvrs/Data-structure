%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% QUICK SORT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%Sorting code

void quick_sort(int* A,int p,int r)
{
	int q;
	if(p<r)
	{
	q=partion(A,p,r);
	quick_sort(A,p,q+1);
	quick_sort(A,q+1,r);
	}
		
}

int partion(int* A,int p,int r)
{
	int i,j,t,key;
	i=p-1;
	key=A[r];
	for(j=p; j<=r-1; j++)
       {
        if(A[i]<=key)
          i=i+1;
        t=A[i];
        A[i]=A[j];
        A[j]=t;
       }
        
        t=A[i+1];
        A[i+1]=A[r];
        A[r]=t;
        
return i+1;
}

%%%%%%%%%%%% Main Function

int main()
{
 int d,A[100],i,n,p,r;
 int arr_size = sizeof(A)/sizeof(A[0]);
 
 printf("Enter how many elements to be taken\n");
	scanf("%d",&n);
		printf(" Enter Array elements\n");
	  	for(i=0; i<n; i++)
		scanf("%d",&A[i]);
	   		printf("Before sorting array elements are\n");
	  		for(i=0; i<n; i++)
	   		printf("%d\t",A[i]);
				quick_sort(A,n,r);
		   			printf("After sorting array elements are\n");
		  			for(i=0; i<n; i++)
	 				printf("%d\t",A[i]);
                    
  }
